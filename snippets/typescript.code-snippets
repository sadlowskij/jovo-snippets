{
  "jovoPluginWithConfig": {
    "prefix": ["jpc", "jovoPluginWithConfig"],
    "body": [
      "import {Jovo, HandleRequest, Plugin, PluginConfig, Extensible, InvalidParentError} from '@jovotech/framework';",
      "",
      "export interface ${1:${TM_FILENAME_BASE}}Config extends PluginConfig {",
      "\t$2",
      "}",
      "",
      "export class ${1:${TM_FILENAME_BASE}} extends Plugin<${1:${TM_FILENAME_BASE}}Config> {",
      "\tmount(extensible: Extensible): void {",
      "\t\tif (!(extensible instanceof HandleRequest)) {",
      "\t\t\tthrow new InvalidParentError(this.constructor.name, HandleRequest);",
      "\t\t}",
      "\t\textensible.middlewareCollection.use('${4:request.start}', (jovo) => this.${5:someMethod}(jovo));",
      "\t}",
      "",
      "\t${5:someMethod}(jovo: Jovo): void {",
      "\t\t$0",
      "\t}",
      "",
      "\tgetDefaultConfig(): ${1:${TM_FILENAME_BASE}}Config {",
      "\t\treturn {$3};",
      "\t}",
      "}"
    ],
    "description": "Creates a simple jovo Plugin including plugin config"
  },
  "jovoPlugin": {
    "prefix": ["jp", "jovoPlugin"],
    "body": [
      "import {Jovo, HandleRequest, Plugin, PluginConfig, Extensible, InvalidParentError} from '@jovotech/framework';",
      "",
      "export class ${1:${TM_FILENAME_BASE}} extends Plugin {",
      "\tmount(extensible: Extensible): void {",
      "\t\tif (!(extensible instanceof HandleRequest)) {",
      "\t\t\tthrow new InvalidParentError(this.constructor.name, HandleRequest);",
      "\t\t}",
      "\t\textensible.middlewareCollection.use('${2:request.start}', (jovo) => this.${3:someMethod}(jovo));",
      "\t}",
      "",
      "\t${3:someMethod}(jovo: Jovo): void {",
      "\t\t$0",
      "\t}",
      "",
      "\tgetDefaultConfig(): PluginConfig {",
      "\t\treturn {};",
      "\t}",
      "}"
    ],
    "description": "Creates a simple jovo Plugin"
  },
  "jovoComponent": {
    "prefix": ["jc", "jovoComponent"],
    "body": [
      "import { Component, BaseComponent, Jovo, ComponentOptions, UnknownObject, ComponentData } from '@jovotech/framework';",
      "",
      "@Component({$2})",
      "export class ${1:${TM_FILENAME_BASE}} extends BaseComponent<ComponentData, UnknownObject, ${3:'SUCCESS'}> {",
      "",
      "\tconstructor(jovo: Jovo, options: ComponentOptions<UnknownObject> | undefined$4) {",
      "\t\tsuper(jovo, options);$5",
      "\t}",
      "",
      "\tSTART(): Promise<void> {",
      "\t\t$0",
      "\t}",
      "}",
      ""
    ],
    "description": "Creates a simple Jovo Component"
  },
  "jovoComponentWithData": {
    "prefix": ["jcd", "jovoComponentWithData"],
    "body": [
      "import { Component, BaseComponent, Jovo, ComponentOptions, UnknownObject } from '@jovotech/framework';",
      "",
      "interface ${1:${TM_FILENAME_BASE}}Data {",
      "\t$3",
      "}",
      "",
      "@Component({$2})",
      "export class ${1:${TM_FILENAME_BASE}} extends BaseComponent<${1:${TM_FILENAME_BASE}}Data, UnknownObject, ${4:'SUCCESS'}> {",
      "",
      "\tconstructor(jovo: Jovo, options: ComponentOptions<UnknownObject> | undefined$5) {",
      "\t\tsuper(jovo, options);$6",
      "\t}",
      "",
      "\tSTART(): Promise<void> {",
      "\t\t$0",
      "\t}",
      "}",
      ""
    ],
    "description": "Creates a simple Jovo Component with ComponentData"
  },
  "jovoComponentWithConfig": {
    "prefix": ["jcc", "jovoComponentWithConfig"],
    "body": [
      "import { Component, BaseComponent, UnknownObject, ComponentData, ComponentOptions, Jovo } from '@jovotech/framework';",
      "",
      "interface ${1:${TM_FILENAME_BASE}}Config extends UnknownObject {",
      "\t$3",
      "}",
      "",
      "@Component({$2})",
      "export class ${1:${TM_FILENAME_BASE}} extends BaseComponent<ComponentData, ${1:${TM_FILENAME_BASE}}Config, ${4:'SUCCESS'}> {",
      "",
      "\tconstructor(jovo: Jovo, options: ComponentOptions<${1:${TM_FILENAME_BASE}}Config> | undefined$5) {",
      "\t\tsuper(jovo, options);$6",
      "\t}",
      "",
      "\tSTART(): Promise<void> {",
      "\t\t$0",
      "\t}",
      "}",
      ""
    ],
    "description": "Creates a simple Jovo Component with ComponentConfig"
  },
  "jovoComponentWithConfigAndData": {
    "prefix": ["jccd", "jovoComponentWithConfigAndData", "jcdc", "jovoComponentWithDataAndConfig"],
    "body": [
      "import { Component, BaseComponent, UnknownObject, ComponentOptions, Jovo } from '@jovotech/framework';",
      "",
      "interface ${1:${TM_FILENAME_BASE}}Data {",
      "\t$3",
      "}",
      "",
      "interface ${1:${TM_FILENAME_BASE}}Config extends UnknownObject {",
      "\t$4",
      "}",
      "",
      "@Component({$2})",
      "export class ${1:${TM_FILENAME_BASE}} extends BaseComponent<${1:${TM_FILENAME_BASE}}Data, ${1:${TM_FILENAME_BASE}}Config, ${5:'SUCCESS'}> {",
      "",
      "\tconstructor(jovo: Jovo, options: ComponentOptions<${1:${TM_FILENAME_BASE}}Config> | undefined$6) {",
      "\t\tsuper(jovo, options);$7",
      "\t}",
      "",
      "\tSTART(): Promise<void> {",
      "\t\t$0",
      "\t}",
      "}",
      ""
    ],
    "description": "Creates a simple Jovo Component with ComponentConfig and ComponentData"
  },
  "jovoOutput": {
    "prefix": ["jo", "jovoOutput"],
    "body": [
      "import { Output, BaseOutput, OutputTemplate, Jovo, OutputOptions } from '@jovotech/framework';",
      "import { DeepPartial } from '@jovotech/common';",
      "",
      "@Output()",
      "export class ${1:${TM_FILENAME_BASE}} extends BaseOutput {",
      "\tconstructor(jovo: Jovo, options: DeepPartial<OutputOptions> | undefined$3) {",
      "\t\tsuper(jovo, options);$4",
      "\t}",
      "",
      "\tasync build(): ${5|Promise<OutputTemplate[]>,Promise<OutputTemplate>|} {",
      "\t\t$0",
      "\t}",
      "}"
    ],
    "description": "Creates a simple Jovo Output Class"
  },
  "jovoOutputWithOptions": {
    "prefix": ["joo", "jovoOutputWithOptions"],
    "body": [
      "import { Output, BaseOutput, OutputTemplate, OutputOptions, Jovo } from '@jovotech/framework';",
      "import { DeepPartial } from '@jovotech/common';",
      "",
      "interface ${1:${TM_FILENAME_BASE}}Options extends OutputOptions {",
      "\t$2",
      "}",
      "",
      "@Output()",
      "export class ${1:${TM_FILENAME_BASE}} extends BaseOutput<${1:${TM_FILENAME_BASE}}Options> {",
      "\tconstructor(jovo: Jovo, options: DeepPartial<${1:${TM_FILENAME_BASE}}Options> | undefined$4) {",
      "\t\tsuper(jovo, options);$5",
      "\t}",
      "",
      "\tasync build(): ${6|Promise<OutputTemplate[]>,Promise<OutputTemplate>|} {",
      "\t\t$0",
      "\t}",
      "}"
    ],
    "description": "Creates a simple Jovo Output Class with Options"
  },
  "jovoHandler": {
    "prefix": ["jh", "jovoHandler"],
    "body": ["@Handle({$2})", "$1(): Promise<void> {", "\t$3", "}", "$0"],
    "description": "Creates a simple Jovo Handler"
  },
  "jovoDelegate": {
    "prefix": ["jovoDelegate", "jd"],
    "body": ["return this.\\$delegate(${1:Component}, { resolve:{${3}}, config: {${4}} });", "$0"],
    "description": "Creates a simple Jovo Delegate"
  },
  "jovoRedirect": {
    "prefix": ["jovoRedirect", "jr"],
    "body": ["return this.\\$redirect(${1:Component}${2:, '${3}'});", "$0"],
    "description": "Creates a simple Jovo Redirect"
  },
  "i18nextTranslation": {
    "prefix": ["i18nextTranslation", "it"],
    "body": [
      "${1:KEY}: [${2/([^|]+)([|\\s]*|)/'$1', /g}],",
      "${0:// Just type all your variations without quotes and separate them with a pipe character \"|\"}"
    ],
    "description": "Creates a translation with an array of values"
  },
  "i18nextDocument": {
    "prefix": ["i18nextDocument", "id"],
    "body": [
      "export default {",
      "\ttranslation: {",
      "\t\t$1",
      "\t}",
      "}"
    ]
  }
}
